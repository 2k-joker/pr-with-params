#!/usr/bin/env ruby

require 'bundler/setup' # support local testing/development
require 'pr/with/params'
require 'json'
require 'optparse'

options = { expand: 1 }
gem_spec = Gem::Specification::load("pr-with-params.gemspec")

parser = OptionParser.new do |opt|
  opt.banner = "Usage #{gem_spec.name} [options]"
  opt.define_head gem_spec.summary

  opt.separator ''

  opt.on('-h', '--help', 'Show this usage help menu') do |_h|
    puts opt
    exit
  end

  opt.separator ''

  opt.on('--base-branch BRANCH', "Specify the base branch for your PR (e.g: 'develop'). Will use default branch otherwise.") do |pr_base_branch|
    options[:base_branch] = pr_base_branch
  end

  opt.on('-t', '--template TEMPLATE', "Specify the filename of the target custom PR template (e.g: 'bug_squash_template.md'). Will use default template otherwise.") do |pr_template|
    options[:template] = pr_template
  end

  opt.on('-d', '--description DESC', 'Specify a custom PR title') do |pr_description|
    options[:title] = pr_description
  end

  opt.on('-l', '--labels LABELS', "Specify a list of labels (e.g: 'help+wanted,bug,urgent,work+in+progress').") do |pr_labels|
    options[:labels] = pr_labels
  end

  opt.on('-a', '--assignees ASSIGNEES', "Specify a list of assignees (e.g: 'octocat,gru').") do |pr_assignees|
    options[:assignees] = pr_assignees
  end
end

begin
  parser.parse!

  #bbbbbb
  branch_name = `git rev-parse --abbrev-ref HEAD`
  base_branch = options.delete(:base_branch) || `git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
  remote_git_uri = `git config --get remote.origin.url`.sub('git@github.com:', '').sub('.git', '').chomp

  uri_host = 'www.github.com'
  uri_path = "/#{remote_git_uri}/compare/#{base_branch.chomp}...#{branch_name.chomp}"

  puts "current branch: \e[36m#{branch_name.chomp}\e[0m"
  puts "base branch: \e[36m#{base_branch.chomp}\e[0m"
  puts "repo path: \e[36m#{remote_git_uri}\e[0m"

  push_message = "\nPushing your local branch to origin/#{branch_name.chomp}..."
  puts "\e[32m#{push_message}\e[0m"
  `sleep 1`
  system("git push -u origin #{branch_name}")

  open_url_message = "\nOpening pull request browser window..."
  puts "\e[32m#{open_url_message}\e[0m"
  `sleep 1`
  PR::With::Params.open(host: uri_host, path: uri_path, query: options)
rescue StandardError => e
  error_message = {
    message: 'An error occurred while building or opening your custom pull request URL',
    reason: e.message,
    backtrace: e.backtrace.last(10)
  }.to_json

  STDERR.puts error_message
  exit 1
end
